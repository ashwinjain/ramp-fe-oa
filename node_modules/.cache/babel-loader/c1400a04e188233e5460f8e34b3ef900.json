{"ast":null,"code":"var _jsxFileName = \"/Users/a290046836/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false); // const transactions = useMemo(\n  //   () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n  //   [paginatedTransactions, transactionsByEmployee]\n  // )\n  // const transactions: Transaction[] = []\n\n  const [transactions, setTransactions] = useState(null);\n  useEffect(() => {\n    if (!transactions) {\n      var _ref, _paginatedTransaction;\n\n      setTransactions((_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null);\n    } else if (transactionsByEmployee) {\n      setTransactions(transactionsByEmployee);\n    } else if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setTransactions([...transactions, ...(paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data)]);\n    } else {\n      setTransactions(null);\n    }\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    console.log(\"here\");\n    setIsLoading(false); // Bug 5: Employees filter not available during loading more data\n\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadNextTransactions = useCallback(async () => {}, []);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          newValue.id ? await loadTransactionsByEmployee(newValue.id) : await loadAllTransactions(); // Bug 3: Cannot select All Employees after selecting an employee\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), transactions !== null && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) &&\n        /*#__PURE__*/\n        // Bug 6: View more button not working as expected\n        _jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            // await loadAllTransactions()\n            await loadNextTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"9VOBmC/Hxjo+upxUp+LImz+4KPQ=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","setTransactions","loadAllTransactions","invalidateData","fetchAll","console","log","loadNextTransactions","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/a290046836/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  // const transactions = useMemo(\n  //   () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n  //   [paginatedTransactions, transactionsByEmployee]\n  // )\n\n  // const transactions: Transaction[] = []\n\n  const [transactions, setTransactions] = useState<Transaction[] | null>(null)\n\n  useEffect(() => {\n    if (!transactions) {\n      setTransactions(paginatedTransactions?.data ?? transactionsByEmployee ?? null)\n    } else if (transactionsByEmployee) {\n      setTransactions(transactionsByEmployee)\n    } else if (paginatedTransactions?.data) {\n      setTransactions([...transactions, ...paginatedTransactions?.data])\n    } else {\n      setTransactions(null)\n    }\n  }, [paginatedTransactions, transactionsByEmployee])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    console.log(\"here\")\n    setIsLoading(false) // Bug 5: Employees filter not available during loading more data\n    await paginatedTransactionsUtils.fetchAll()\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n  \n  const loadNextTransactions = useCallback(async () => {\n\n  }, [])\n  \n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n\n      transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n            newValue.id ? await loadTransactionsByEmployee(newValue.id) : await loadAllTransactions() // Bug 3: Cannot select All Employees after selecting an employee\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null &&\n            paginatedTransactions?.nextPage && ( // Bug 6: View more button not working as expected\n              <button\n                className=\"RampButton\"\n                disabled={paginatedTransactionsUtils.loading}\n                onClick={async () => {\n                  // await loadAllTransactions()\n                  await loadNextTransactions()\n                }}\n              >\n                View More\n              </button>\n            )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}